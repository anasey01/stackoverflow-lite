{"version":3,"sources":["../../middleware/validateToken.js"],"names":["validateToken","req","res","next","tokenHeader","header","status","json","success","message","decoded","jwt","verify","process","env","PRIVATE_KEY","user","err"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxC,MAAMC,cAAcH,IAAII,MAAJ,CAAW,cAAX,CAApB;AACA,MAAI,CAACD,WAAL,EAAkB;AAChB,WAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,KADiB;AAE1BC,eAAS;AAFiB,KAArB,CAAP;AAID;AACD,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWR,WAAX,EAAwBS,QAAQC,GAAR,CAAYC,WAApC,CAAhB;AACAd,QAAIe,IAAJ,GAAWN,OAAX;AACAP;AACD,GAJD,CAIE,OAAOc,GAAP,EAAY;AACZf,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,eAAS,KADU;AAEnBC,eAAS;AAFU,KAArB;AAID;AACF,CAlBD;;kBAoBeT,a","file":"validateToken.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst validateToken = (req, res, next) => {\n  const tokenHeader = req.header('x-auth-token');\n  if (!tokenHeader) {\n    return res.status(401).json({\n      success: false,\n      message: 'Access denied. No token provided.',\n    });\n  }\n  try {\n    const decoded = jwt.verify(tokenHeader, process.env.PRIVATE_KEY);\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(400).json({\n      success: false,\n      message: 'Invalid token.',\n    });\n  }\n};\n\nexport default validateToken;\n"]}