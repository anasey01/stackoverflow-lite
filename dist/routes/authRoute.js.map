{"version":3,"sources":["../../routes/authRoute.js"],"names":["db","DatabaseManager","auth","Authentication","authRouter","express","Router","use","bodyParser","urlencoded","extended","json","get","req","res","status","success","message","post","obj","body","registerUser","fullname","gender","username","password","email","result","login","token","jwt","sign","_id","id","name"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,KAAK,IAAIC,yBAAJ,EAAX;AACA,IAAMC,OAAO,IAAIC,wBAAJ,CAAmBH,EAAnB,CAAb;;AAEA,IAAMI,aAAaC,kBAAQC,MAAR,EAAnB;AACAF,WAAWG,GAAX,CAAeC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAf;AACAN,WAAWG,GAAX,CAAeC,qBAAWG,IAAX,EAAf;AACAP,WAAWG,GAAX,CAAe,sBAAO,6BAAP,CAAf;;AAEAH,WAAWQ,GAAX,CAAe,SAAf,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AACnBK,aAAS,IADU;AAEnBC,aAAS;AAFU,GAArB;AAID,CALD;;AAOAb,WAAWc,IAAX,CAAgB,SAAhB,EAA2B,UAACL,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAMK,MAAMN,IAAIO,IAAhB;AACAlB,OAAKmB,YAAL,CAAkBF,IAAIG,QAAtB,EAAgCH,IAAII,MAApC,EAA4CJ,IAAIK,QAAhD,EAA0DL,IAAIM,QAA9D,EAAwEN,IAAIO,KAA5E,EAAmF,UAACC,MAAD,EAAY;AAC7F,QAAIA,WAAW,UAAf,EAA2B;AACzBb,UAAIC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AACnBK,iBAAS,KADU;AAEnBC,iBAAS;AAFU,OAArB;AAID,KALD,MAKO;AACLH,UAAIC,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AACnBI,gBAAQ,IADW;AAEnBE,iBAAS;AAFU,OAArB;AAID;AACF,GAZD;AAaD,CAfD;;AAiBAb,WAAWc,IAAX,CAAgB,QAAhB,EAA0B,UAACL,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAMK,MAAMN,IAAIO,IAAhB;AACAlB,OAAK0B,KAAL,CAAWT,IAAIK,QAAf,EAAyBL,IAAIM,QAA7B,EAAuC,UAACE,MAAD,EAAY;AACjD,QAAME,QAAQC,uBAAIC,IAAJ,CACZ;AACEC,WAAKL,OAAOM,EADd;AAEEC,YAAMP,OAAOL,QAFf;AAGEC,cAAQI,OAAOJ,MAHjB;AAIEC,gBAAUG,OAAOH,QAJnB;AAKEE,aAAOC,OAAOD;AALhB,KADY,EAOT,eAPS,CAAd;AASAZ,QAAIH,IAAJ,CAASkB,KAAT;AACD,GAXD;AAYD,CAdD;;kBAgBezB,U","file":"authRoute.js","sourcesContent":["import express from 'express';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport jwt from 'jsonwebtoken';\nimport Authentication from '../auth/Authentication';\nimport DatabaseManager from '../controllers/DatabaseManager';\n\nconst db = new DatabaseManager();\nconst auth = new Authentication(db);\n\nconst authRouter = express.Router();\nauthRouter.use(bodyParser.urlencoded({ extended: false }));\nauthRouter.use(bodyParser.json());\nauthRouter.use(morgan(':method :url :response-time'));\n\nauthRouter.get('/signup', (req, res) => {\n  res.status(200).json({\n    success: true,\n    message: 'Welcome to signup API route',\n  });\n});\n\nauthRouter.post('/signup', (req, res) => {\n  const obj = req.body;\n  auth.registerUser(obj.fullname, obj.gender, obj.username, obj.password, obj.email, (result) => {\n    if (result === 'existing') {\n      res.status(400).json({\n        success: false,\n        message: 'username already exists',\n      });\n    } else {\n      res.status(200).json({\n        status: true,\n        message: 'user succesfully registered',\n      });\n    }\n  });\n});\n\nauthRouter.post('/login', (req, res) => {\n  const obj = req.body;\n  auth.login(obj.username, obj.password, (result) => {\n    const token = jwt.sign(\n      {\n        _id: result.id,\n        name: result.fullname,\n        gender: result.gender,\n        username: result.username,\n        email: result.email,\n      }, 'jwtPrivateKey',\n    );\n    res.json(token);\n  });\n});\n\nexport default authRouter;\n"]}