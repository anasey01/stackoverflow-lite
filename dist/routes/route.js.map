{"version":3,"sources":["../../routes/route.js"],"names":["router","express","Router","sampleData","id","title","content","use","bodyParser","urlencoded","extended","json","get","req","res","status","success","message","dataId","Number","params","existing","forEach","item","post","length","newQuestion","body","push","answers"],"mappings":"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","file":"route.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { runInNewContext } from \"vm\";\nconst router = express.Router();\n\nconst sampleData = [{ id: 1, title: 'Title 1', content: 'Here\\'s a content' }];\n\nrouter.use(bodyParser.urlencoded({ extended: false }));\nrouter.use(bodyParser.json());\n\nrouter.get('/', (req, res) => {\n  res.status(200).json({\n    success: true,\n    message: 'Welcome to Stackoverflow-lite API',\n  });\n});\n\nrouter.get('/questions', (req, res) => {\n  res.status(200).json(sampleData);\n});\n\nrouter.get('/questions/:id', (req, res) => {\n  let dataId = Number(req.params.id);\n  let existing = 'Data Not Found!';\n  sampleData.forEach((item) => {\n    if (item.id === dataId) {\n      existing = item;\n    }\n  });\n\n  if(existing === \"Data Not Found!\"){\n    res.status(404).json(existing);\n  }else{\n    res.status(200).json(existing);\n  }\n});\n\n\nrouter.post(\"/questions\", (req, res)=>{\n  let id = sampleData.length + 1;\n  let newQuestion = {\n    id,\n    title: req.body.title,\n    content: req.body.content,\n  };\n  sampleData.push(newQuestion);\n  res.status(200).json(sampleData[sampleData.length - 1]);\n});\n\n\nrouter.post('/questions', (req, res) => {\n  let id = sampleData.length + 1;\n  let newQuestion = {\n    id,\n    title: req.body.title,\n    content: req.body.content,\n  };\n  sampleData.push(newQuestion);\n  res.status(200).json(sampleData[sampleData.length - 1]);\n});\n\nrouter.post('/questions/:id/answers', (req, res) => {\n  let dataId = Number(req.params.id);\n  let existing = 'Data Not Found!';\n  sampleData.forEach((item) => {\n    if (item.id === dataId) {\n      existing = item;\n    }\n  });\n  if (existing === 'Data Not Found!') {\n    return res.status(400).json(existing);\n  } else if (!existing[\"answers\"]){\n    existing.answers = [req.body.answers]\n    return res.status(200).json(existing);\n  } else {\n    existing.answers.push(req.body.answers);\n    return res.status(200).json(existing);\n  }\n});\n\nrouter.get('*', (req, res) => res.status(400).json({\n  status: false,\n  message: 'Bad Request! Incorrect Address!',\n}));\n\nexport default router;\n\n"]}