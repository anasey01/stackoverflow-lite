{"version":3,"sources":["../../routes/route.js"],"names":["router","express","Router","sampleData","use","bodyParser","urlencoded","extended","json","get","req","res","send","next","dataId","params","id","existing","forEach","item","status","post","length","newQuestion","title","body","content","push","answers"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;AACA,IAAIC,aAAa,CAAC,EAAC,MAAM,CAAP,EAAU,SAAS,SAAnB,EAA8B,WAAY,kBAA1C,EAAD,CAAjB;;AAEA;AACAH,OAAOI,GAAP,CAAWC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAX;;AAEA;AACAP,OAAOI,GAAP,CAAWC,qBAAWG,IAAX,EAAX;;AAEA;AACAR,OAAOS,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAY;AACxBA,QAAIC,IAAJ,CAAS,kCAAT;AACH,CAFD;;AAIA;AACAZ,OAAOS,GAAP,CAAW,YAAX,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAY;AACjCA,QAAIC,IAAJ,CAAST,UAAT;AACH,CAFD;;AAIA;AACAH,OAAOS,GAAP,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAkB;AAC3C,QAAIC,SAASJ,IAAIK,MAAJ,CAAWC,EAAxB;AACA,QAAIC,WAAW,iBAAf;AACAd,eAAWe,OAAX,CAAmB,gBAAM;AACrB,YAAGC,KAAKH,EAAL,IAAWF,MAAd,EAAqB;AACjBG,uBAAWE,IAAX;AACH;AACH,KAJF;;AAMC,QAAGF,aAAa,iBAAhB,EAAkC;AAC/BN,YAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBS,QAArB;AACF,KAFD,MAEK;AACFN,YAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBS,QAArB;AACF;AACL,CAdD;;AAgBA;AACAjB,OAAOqB,IAAP,CAAY,YAAZ,EAA0B,UAACX,GAAD,EAAMC,GAAN,EAAY;AAClC,QAAIK,KAAKb,WAAWmB,MAAX,GAAoB,CAA7B;AACA,QAAIC,cAAc;AACdP,YAAKA,EADS;AAEdQ,eAAQd,IAAIe,IAAJ,CAASD,KAFH;AAGdE,iBAAUhB,IAAIe,IAAJ,CAASC;AAHL,KAAlB;AAKAvB,eAAWwB,IAAX,CAAgBJ,WAAhB;AACAZ,QAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBL,WAAWA,WAAWmB,MAAX,GAAoB,CAA/B,CAArB;AACH,CATD;;AAWA;AACAtB,OAAOqB,IAAP,CAAY,wBAAZ,EAAsC,UAACX,GAAD,EAAMC,GAAN,EAAY;AAC9C,QAAIG,SAASJ,IAAIK,MAAJ,CAAWC,EAAxB;AACA,QAAIC,WAAW,iBAAf;AACAd,eAAWe,OAAX,CAAmB,gBAAM;AACrB,YAAGC,KAAKH,EAAL,IAAWF,MAAd,EAAqB;AACjBG,uBAAWE,IAAX;AACH;AACH,KAJF;AAKC,QAAGF,aAAa,iBAAhB,EAAkC;AAC/B,eAAON,IAAIS,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqBS,QAArB,CAAP;AACF,KAFD,MAEM,IAAG,CAACA,SAAS,SAAT,CAAJ,EAAwB;AAC3BA,iBAASW,OAAT,GAAmB,CAAClB,IAAIe,IAAJ,CAASG,OAAV,CAAnB;AACA,eAAOjB,IAAIH,IAAJ,CAASS,QAAT,CAAP;AACF,KAHK,MAGD;AACFA,iBAASW,OAAT,CAAiBD,IAAjB,CAAsBjB,IAAIe,IAAJ,CAASG,OAA/B;AACA,eAAOjB,IAAIH,IAAJ,CAASS,QAAT,CAAP;AACF;AACL,CAjBD;;AAmBA;AACAjB,OAAOS,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,WAAOA,IAAIH,IAAJ,CAAS,sBAAT,CAAP;AACH,CAFD;kBAGeR,M","file":"route.js","sourcesContent":["import express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nimport { runInNewContext } from \"vm\";\r\nconst router = express.Router();\r\n\r\n//Simulate DataBase in Memory\r\nlet sampleData = [{\"id\": 1, \"title\": \"Title 1\", \"content\" : \"Here's a content\"}];\r\n\r\n// parse application/x-www-form-urlencoded\r\nrouter.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n// parse application/json\r\nrouter.use(bodyParser.json());\r\n\r\n//GET API homepage\r\nrouter.get(\"/\", (req, res)=>{\r\n    res.send(\"<h1>Welcome to API homepage</h1>\");\r\n});\r\n\r\n//GET All Questions\r\nrouter.get(\"/questions\", (req, res)=>{\r\n    res.send(sampleData);\r\n});\r\n\r\n//GET Specific Question\r\nrouter.get(\"/questions/:id\", (req, res, next)=>{\r\n    let dataId = req.params.id;\r\n    let existing = \"Data Not Found!\";\r\n    sampleData.forEach(item=>{\r\n        if(item.id == dataId){\r\n            existing = item;\r\n        }\r\n     });\r\n\r\n     if(existing === \"Data Not Found!\"){\r\n        res.status(404).json(existing);\r\n     }else{\r\n        res.status(200).json(existing);\r\n     }\r\n});\r\n\r\n//POST a Question\r\nrouter.post(\"/questions\", (req, res)=>{\r\n    let id = sampleData.length + 1;\r\n    let newQuestion = {\r\n        id : id,\r\n        title : req.body.title,\r\n        content : req.body.content\r\n    }\r\n    sampleData.push(newQuestion);\r\n    res.status(200).json(sampleData[sampleData.length - 1]);\r\n});\r\n\r\n//POST an answer\r\nrouter.post(\"/questions/:id/answers\", (req, res)=>{\r\n    let dataId = req.params.id;\r\n    let existing = \"Data Not Found!\";\r\n    sampleData.forEach(item=>{\r\n        if(item.id == dataId){\r\n            existing = item;\r\n        }\r\n     });\r\n     if(existing === \"Data Not Found!\"){\r\n        return res.status(400).json(existing);\r\n     }else if(!existing[\"answers\"]){\r\n        existing.answers = [req.body.answers]\r\n        return res.json(existing);\r\n     }else{\r\n        existing.answers.push(req.body.answers);\r\n        return res.json(existing);\r\n     }\r\n});\r\n\r\n//Any other routes\r\nrouter.get(\"*\", (req, res) => {\r\n    return res.json(\"API URL NOT CORRECT!\");\r\n});\r\nexport default router;"]}