{"version":3,"sources":["../../routes/route.js"],"names":["router","express","Router","sampleData","use","bodyParser","urlencoded","extended","json","get","req","res","send","dataId","params","id","forEach","item","status","post","length","newQuestion","title","body","content","push","answer"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;AACA,IAAIC,aAAa,CAAC,EAAC,MAAM,CAAP,EAAU,SAAS,SAAnB,EAA8B,WAAY,kBAA1C,EAAD,CAAjB;;AAEA;AACAH,OAAOI,GAAP,CAAWC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAX;;AAEA;AACAP,OAAOI,GAAP,CAAWC,qBAAWG,IAAX,EAAX;;AAEA;AACAR,OAAOS,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAY;AACxBA,QAAIC,IAAJ,CAAS,kCAAT;AACH,CAFD;;AAIA;AACAZ,OAAOS,GAAP,CAAW,YAAX,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAY;AACjCA,QAAIC,IAAJ,CAAST,UAAT;AACH,CAFD;;AAIA;AACAH,OAAOS,GAAP,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAY;AACrC,QAAIE,SAASH,IAAII,MAAJ,CAAWC,EAAxB;AACAZ,eAAWa,OAAX,CAAmB,gBAAM;AACrB,YAAGC,KAAKF,EAAL,IAAWF,MAAd,EAAqB;AACjB,mBAAOF,IAAIH,IAAJ,CAASS,IAAT,CAAP;AACH;AACH,KAJF;AAKA,WAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB,iBAArB,CAAP;AACH,CARD;;AAUA;AACAR,OAAOmB,IAAP,CAAY,YAAZ,EAA0B,UAACT,GAAD,EAAMC,GAAN,EAAY;AAClC,QAAII,KAAKZ,WAAWiB,MAAX,GAAoB,CAA7B;AACA,QAAIC,cAAc;AACdN,YAAKA,EADS;AAEdO,eAAQZ,IAAIa,IAAJ,CAASD,KAFH;AAGdE,iBAAUd,IAAIa,IAAJ,CAASC;AAHL,KAAlB;AAKArB,eAAWsB,IAAX,CAAgBJ,WAAhB;AACAV,QAAIO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqBL,WAAWA,WAAWiB,MAAX,GAAoB,CAA/B,CAArB;AACH,CATD;;AAWA;AACApB,OAAOmB,IAAP,CAAY,wBAAZ,EAAsC,UAACT,GAAD,EAAMC,GAAN,EAAY;AAC9C,QAAIE,SAASH,IAAII,MAAJ,CAAWC,EAAxB;AACAZ,eAAWa,OAAX,CAAmB,gBAAM;AACrB,YAAGC,KAAKF,EAAL,IAAWF,MAAd,EAAqB;AAClB,gBAAG,CAACI,KAAK,QAAL,CAAJ,EAAmB;AACdA,qBAAKS,MAAL,GAAc,CAAChB,IAAIa,IAAJ,CAASG,MAAV,CAAd;AACA,uBAAOf,IAAIH,IAAJ,CAASS,IAAT,CAAP;AACJ,aAHD,MAGK;AACDA,qBAAK,QAAL,EAAeQ,IAAf,CAAoBf,IAAIa,IAAJ,CAASG,MAA7B;AACA,uBAAOf,IAAIH,IAAJ,CAASS,IAAT,CAAP;AACH;AACH;AACH,KAVF;AAWC,WAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB,iBAArB,CAAP;AACJ,CAdD;;AAgBA;AACAR,OAAOS,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1B,WAAOA,IAAIH,IAAJ,CAAS,sBAAT,CAAP;AACH,CAFD;kBAGeR,M","file":"route.js","sourcesContent":["import express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nconst router = express.Router();\r\n\r\n//Simulate DataBase in Memory\r\nlet sampleData = [{\"id\": 1, \"title\": \"Title 1\", \"content\" : \"Here's a content\"}];\r\n\r\n// parse application/x-www-form-urlencoded\r\nrouter.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n// parse application/json\r\nrouter.use(bodyParser.json());\r\n\r\n//GET API homepage\r\nrouter.get(\"/\", (req, res)=>{\r\n    res.send(\"<h1>Welcome to API homepage</h1>\");\r\n});\r\n\r\n//GET All Questions\r\nrouter.get(\"/questions\", (req, res)=>{\r\n    res.send(sampleData);\r\n});\r\n\r\n//GET Specific Question\r\nrouter.get(\"/questions/:id\", (req, res)=>{\r\n    let dataId = req.params.id;\r\n    sampleData.forEach(item=>{\r\n        if(item.id == dataId){\r\n            return res.json(item);\r\n        }\r\n     });\r\n    return res.status(400).json('Data Not Found!');\r\n});\r\n\r\n//POST a Question\r\nrouter.post(\"/questions\", (req, res)=>{\r\n    let id = sampleData.length + 1;\r\n    let newQuestion = {\r\n        id : id,\r\n        title : req.body.title,\r\n        content : req.body.content\r\n    }\r\n    sampleData.push(newQuestion);\r\n    res.status(200).json(sampleData[sampleData.length - 1]);\r\n});\r\n\r\n//POST an answer\r\nrouter.post(\"/questions/:id/answers\", (req, res)=>{\r\n    let dataId = req.params.id;\r\n    sampleData.forEach(item=>{\r\n        if(item.id == dataId){\r\n           if(!item[\"answer\"]){\r\n                item.answer = [req.body.answer];\r\n                return res.json(item);\r\n           }else{\r\n               item[\"answer\"].push(req.body.answer);\r\n               return res.json(item);\r\n           }\r\n        }\r\n     });\r\n     return res.status(400).json('Data Not Found!');\r\n});\r\n\r\n//Anyother routes\r\nrouter.get(\"*\", (req, res) => {\r\n    return res.json(\"API URL NOT CORRECT!\");\r\n});\r\nexport default router;"]}