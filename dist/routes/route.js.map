{"version":3,"sources":["../../routes/route.js"],"names":["router","express","Router","sampleData","id","title","content","use","bodyParser","urlencoded","extended","json","get","req","res","send","dataId","Number","params","existing","forEach","item","status","post","length","newQuestion","body","push","answers"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;AACA,IAAMC,aAAa,CAAC,EAAEC,IAAI,CAAN,EAASC,OAAO,SAAhB,EAA2BC,SAAS,mBAApC,EAAD,CAAnB;;AAEA;AACAN,OAAOO,GAAP,CAAWC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAX;;AAEA;AACAV,OAAOO,GAAP,CAAWC,qBAAWG,IAAX,EAAX;;AAEA;AACAX,OAAOY,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5BA,MAAIC,IAAJ,CAAS,kCAAT;AACD,CAFD;;AAIA;AACAf,OAAOY,GAAP,CAAW,YAAX,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrCA,MAAIC,IAAJ,CAASZ,UAAT;AACD,CAFD;;AAIA;AACAH,OAAOY,GAAP,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAIE,SAASC,OAAOJ,IAAIK,MAAJ,CAAWd,EAAlB,CAAb;AACA,MAAIe,WAAW,iBAAf;AACAhB,aAAWiB,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,QAAIA,KAAKjB,EAAL,KAAYY,MAAhB,EAAwB;AACtBG,iBAAWE,IAAX;AACD;AACF,GAJD;;AAMA,MAAIF,aAAa,iBAAjB,EAAoC;AAClCL,QAAIQ,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBQ,QAArB;AACD,GAFD,MAEO;AACLL,QAAIQ,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBQ,QAArB;AACD;AACF,CAdD;;AAgBA;AACAnB,OAAOuB,IAAP,CAAY,YAAZ,EAA0B,UAACV,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAIV,KAAKD,WAAWqB,MAAX,GAAoB,CAA7B;AACA,MAAIC,cAAc;AAChBrB,QAAIA,EADY;AAEhBC,WAAOQ,IAAIa,IAAJ,CAASrB,KAFA;AAGhBC,aAASO,IAAIa,IAAJ,CAASpB;AAHF,GAAlB;AAKAH,aAAWwB,IAAX,CAAgBF,WAAhB;AACAX,MAAIQ,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBR,WAAWA,WAAWqB,MAAX,GAAoB,CAA/B,CAArB;AACD,CATD;;AAWA;AACAxB,OAAOuB,IAAP,CAAY,wBAAZ,EAAsC,UAACV,GAAD,EAAMC,GAAN,EAAc;AAClD,MAAIE,SAASC,OAAOJ,IAAIK,MAAJ,CAAWd,EAAlB,CAAb;AACA,MAAIe,WAAW,iBAAf;AACAhB,aAAWiB,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,QAAIA,KAAKjB,EAAL,KAAYY,MAAhB,EAAwB;AACtBG,iBAAWE,IAAX;AACD;AACF,GAJD;AAKA,MAAIF,aAAa,iBAAjB,EAAoC;AAClC,WAAOL,IAAIQ,MAAJ,CAAW,GAAX,EAAgBX,IAAhB,CAAqBQ,QAArB,CAAP;AACD,GAFD,MAEO,IAAI,CAACA,SAAS,SAAT,CAAL,EAAyB;AAC9BA,aAASS,OAAT,GAAmB,CAACf,IAAIa,IAAJ,CAASE,OAAV,CAAnB;AACA,WAAOd,IAAIH,IAAJ,CAASQ,QAAT,CAAP;AACD,GAHM,MAGA;AACLA,aAASS,OAAT,CAAiBD,IAAjB,CAAsBd,IAAIa,IAAJ,CAASE,OAA/B;AACA,WAAOd,IAAIH,IAAJ,CAASQ,QAAT,CAAP;AACD;AACF,CAjBD;;AAmBA;AACAnB,OAAOY,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIH,IAAJ,CAAS,sBAAT,CAAd;AAAA,CAAhB;kBACeX,M","file":"route.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\n\nconst router = express.Router();\n\n// Simulate DataBase in Memory\nconst sampleData = [{ id: 1, title: 'Title 1', content: 'Here\\'s a content' }];\n\n// parse application/x-www-form-urlencoded\nrouter.use(bodyParser.urlencoded({ extended: false }));\n\n// parse application/json\nrouter.use(bodyParser.json());\n\n// GET API homepage\nrouter.get('/', (req, res) => {\n  res.send('<h1>Welcome to API homepage</h1>');\n});\n\n// GET All Questions\nrouter.get('/questions', (req, res) => {\n  res.send(sampleData);\n});\n\n// GET Specific Question\nrouter.get('/questions/:id', (req, res) => {\n  let dataId = Number(req.params.id);\n  let existing = 'Data Not Found!';\n  sampleData.forEach((item) => {\n    if (item.id === dataId) {\n      existing = item;\n    }\n  });\n\n  if (existing === 'Data Not Found!') {\n    res.status(404).json(existing);\n  } else {\n    res.status(200).json(existing);\n  }\n});\n\n// POST a Question\nrouter.post('/questions', (req, res) => {\n  let id = sampleData.length + 1;\n  let newQuestion = {\n    id: id,\n    title: req.body.title,\n    content: req.body.content,\n  };\n  sampleData.push(newQuestion);\n  res.status(200).json(sampleData[sampleData.length - 1]);\n});\n\n// POST an answer\nrouter.post('/questions/:id/answers', (req, res) => {\n  let dataId = Number(req.params.id);\n  let existing = 'Data Not Found!';\n  sampleData.forEach((item) => {\n    if (item.id === dataId) {\n      existing = item;\n    }\n  });\n  if (existing === 'Data Not Found!') {\n    return res.status(400).json(existing);\n  } else if (!existing[\"answers\"]){\n    existing.answers = [req.body.answers]\n    return res.json(existing);\n  } else {\n    existing.answers.push(req.body.answers);\n    return res.json(existing);\n  }\n});\n\n// Any other routes\nrouter.get('*', (req, res) => res.json('API URL NOT CORRECT!'));\nexport default router;\n"]}