{"version":3,"sources":["../../controllers/Votes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","Votes","req","res","next","params","questionId","answerId","user","userId","username","createUpvotes","err","vote","status","json","success","messgae","createDownvotes","getUpvotes","error","upvotes","totalUpvotes","length","getDownvotes","downvotes","totalDownvotes","updateAnswerWithUpvotes","data","message","answerData","updateAnswerWithDownvotes"],"mappings":"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","file":"Votes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\nimport QuestionManager from './QuestionManager';\n\nconst db = new DatabaseManager();\nconst questionManager = new QuestionManager(db);\n\nclass Votes {\n  static upvote(req, res, next) {\n    const { questionId, answerId } = req.params;\n    const { userId, username } = req.user;\n    questionManager.createUpvotes(+questionId, +answerId, userId, username, (err, vote) => {\n      if (err) {\n        return res.status(401).json({\n          success: false,\n          messgae: 'unable to upvote answer',\n        });\n      }\n      return next();\n    });\n  }\n\n  static downvote(req, res, next) {\n    const { userId, username } = req.user;\n    const { questionId, answerId } = req.params;\n    questionManager.createDownvotes(+questionId, +answerId, userId, username, (err, vote) => {\n      if (err) {\n        return res.status(401).json({\n          success: false,\n          messgae: 'unable to downote answer',\n        });\n      }\n      return next();\n    });\n  }\n\n  static getTotalUpvotes(req, res, next) {\n    const { questionId, answerId } = req.params;\n    questionManager.getUpvotes(+questionId, +answerId, (error, upvotes) => {\n      req.totalUpvotes = upvotes.length;\n      return next();\n    });\n  }\n\n  static getTotalDownvotes(req, res, next) {\n    const { questionId, answerId } = req.params;\n    questionManager.getDownvotes(+questionId, +answerId, (error, downvotes) => {\n      req.totalDownvotes = downvotes.length;\n      return next();\n    });\n  }\n\n  static saveUpvotes(req, res) {\n    const { totalUpvotes } = req;\n    const { questionId, answerId } = req.params;\n    questionManager.updateAnswerWithUpvotes(+questionId, +answerId, totalUpvotes, (error, data) => {\n      if (error) {\n        return res.status(500).json({\n          success: false,\n          message: 'Error saving upvotes for this answer',\n          error,\n        });\n      }\n      return res.status(200).json({\n        success: true,\n        message: 'Successfully upvoted this answer',\n        answerData: data,\n      });\n    });\n  }\n\n  static saveDownvotes(req, res) {\n    const { totalDownvotes } = req;\n    const { questionId, answerId } = req.params;\n    questionManager.updateAnswerWithDownvotes(+questionId, +answerId, totalDownvotes, (error, data) => {\n      if (error) {\n        return res.status(500).json({\n          success: false,\n          message: 'Error saving downvotes for this answer',\n          error,\n        });\n      }\n      return res.status(200).json({\n        success: true,\n        message: 'Successfully downvoted this answer',\n        answerData: data,\n      });\n    });\n  }\n\n  // static getAllVotes(req, res) {\n\n  // }\n}\nexport default Votes;\n"]}