{"version":3,"sources":["../../controllers/Comments.js"],"names":["db","DatabaseManager","questionsManager","QuestionsManager","Comment","req","res","answerId","params","questionId","user","userId","username","comment","body","createComments","error","resComment","status","json","success","message","next","id","getAllComments","comments","userComment"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,KAAK,IAAIC,yBAAJ,EAAX;AACA,IAAMC,mBAAmB,IAAIC,yBAAJ,CAAqBH,EAArB,CAAzB;;IAEMI,O;;;;;;;kCAEiBC,G,EAAKC,G,EAAK;AAAA,UACrBC,QADqB,GACRF,IAAIG,MADI,CACrBD,QADqB;AAAA,UAErBE,UAFqB,GAENJ,IAAIG,MAFE,CAErBC,UAFqB;AAAA,sBAGAJ,IAAIK,IAHJ;AAAA,UAGrBC,MAHqB,aAGrBA,MAHqB;AAAA,UAGbC,QAHa,aAGbA,QAHa;AAAA,UAIrBC,OAJqB,GAITR,IAAIS,IAJK,CAIrBD,OAJqB;;AAK7BX,uBAAiBa,cAAjB,CAAgCJ,MAAhC,EAAwC,CAACF,UAAzC,EAAqDF,QAArD,EAA+DM,OAA/D,EAAwED,QAAxE,EAAkF,UAACI,KAAD,EAAQC,UAAR,EAAuB;AACvG,YAAID,KAAJ,EAAW;AACT,iBAAOV,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,IADiB;AAE1BC,mBAAS,4BAFiB;AAG1BJ;AAH0B,SAArB,CAAP;AAKD,OAZD;AAaD;;;gCAEkBZ,G,EAAKC,G,EAAKgB,I,EAAM;AACjC,UAAMb,aAAaJ,IAAIG,MAAJ,CAAWe,EAA9B;AACArB,uBAAiBsB,cAAjB,CAAgCf,UAAhC,EAA4C,UAACO,KAAD,EAAQS,QAAR,EAAqB;AAC/D,YAAIT,KAAJ,EAAW;AACT,iBAAOV,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACDhB,YAAIqB,WAAJ,GAAkBD,QAAlB;AACA,eAAOH,MAAP;AACD,OATD;AAUD;;;;;;kBAGYlB,O","file":"Comments.js","sourcesContent":["import QuestionsManager from './QuestionManager';\nimport DatabaseManager from '../net/DatabaseManager';\n\nconst db = new DatabaseManager();\nconst questionsManager = new QuestionsManager(db);\n\nclass Comment {\n\n  static createComment(req, res) {\n    const { answerId } = req.params;\n    const { questionId } = req.params;\n    const { userId, username } = req.user;\n    const { comment } = req.body;\n    questionsManager.createComments(userId, +questionId, answerId, comment, username, (error, resComment) => {\n      if (error) {\n        return res.status(400).json({\n          success: false,\n          message: 'unable to add comments',\n        });\n      }\n      return res.status(200).json({\n        success: true,\n        message: 'Comment successfully added',\n        resComment,\n      });\n    });\n  }\n\n  static getComments(req, res, next) {\n    const questionId = req.params.id;\n    questionsManager.getAllComments(questionId, (error, comments) => {\n      if (error) {\n        return res.status(500).json({\n          success: false,\n          message: 'unable to get comments for this answer',\n        });\n      }\n      req.userComment = comments;\n      return next();\n    });\n  }\n}\n\nexport default Comment;\n"]}