{"version":3,"sources":["../../controllers/QuestionManager.js"],"names":["QuestionManager","connection","conn","table","answerTable","user_id","title","content","callback","insertQuestion","err","result","selectById","res","selectQuestions","id","question_id","answer","insertAnswer","getQuestion","selectAnswer","console","log"],"mappings":";;;;;;;;;;IACMA,e;AACJ,2BAAYC,UAAZ,EAAwB;AAAA;;AACtB,SAAKC,IAAL,GAAYD,UAAZ;AACA,SAAKE,KAAL,GAAa,WAAb;AACA,SAAKC,WAAL,GAAmB,SAAnB;AACD;;;;mCAEcC,O,EAASC,K,EAAOC,O,EAASC,Q,EAAU;AAAA;;AAChD,WAAKN,IAAL,CAAUO,cAAV,CAAyBJ,OAAzB,EAAkCC,KAAlC,EAAyCC,OAAzC,EAAkD,UAACG,GAAD,EAAMC,MAAN,EAAiB;AACjE,YAAID,GAAJ,EAAS;AACPF,mBAAS,OAAT;AACD;AACD,cAAKN,IAAL,CAAUU,UAAV,CAAqB,MAAKT,KAA1B,EAAiCE,OAAjC,EAA0C,UAACQ,GAAD,EAAMH,GAAN,EAAc;AACtD,cAAIA,GAAJ,EAAS;AACPF,qBAASE,GAAT;AACD,WAFD,MAEO;AACLF,qBAASK,GAAT;AACD;AACF,SAND;AAOD,OAXD;AAYD;;;mCAEcL,Q,EAAU;AACvB,WAAKN,IAAL,CAAUY,eAAV,CAA0B,UAACH,MAAD,EAASD,GAAT,EAAiB;AACzC,YAAIA,GAAJ,EAAS;AACPF,mBAAS,yCAAT;AACD;AACDA,iBAASG,MAAT;AACD,OALD;AAMD;;;gCAEWI,E,EAAIP,Q,EAAU;AACxB,WAAKN,IAAL,CAAUU,UAAV,CAAqB,KAAKT,KAA1B,EAAiCY,EAAjC,EAAqC,UAACJ,MAAD,EAASD,GAAT,EAAiB;AACpD,YAAIA,GAAJ,EAAS;AACPF,mBAASE,GAAT;AACD;AACDF,iBAASG,MAAT;AACD,OALD;AAMD;;;iCAEYN,O,EAASW,W,EAAaC,M,EAAQT,Q,EAAU;AAAA;;AACnD,WAAKN,IAAL,CAAUgB,YAAV,CAAuBb,OAAvB,EAAgCW,WAAhC,EAA6CC,MAA7C,EAAqD,UAACP,GAAD,EAAMC,MAAN,EAAiB;AACpE,YAAID,GAAJ,EAAS;AACPF,mBAASE,GAAT;AACD;AACD,eAAKS,WAAL,CAAiBH,WAAjB,EAA8B,UAACL,MAAD,EAASD,GAAT,EAAiB;AAC7CF,mBAASG,MAAT;AACD,SAFD;AAGD,OAPD;AAQD;;;8BAESK,W,EAAaR,Q,EAAU;AAAA;;AAC/B,WAAKN,IAAL,CAAUkB,YAAV,CAAuB,KAAKhB,WAA5B,EAAyCY,WAAzC,EAAsD,UAACN,GAAD,EAAMC,MAAN,EAAiB;AACrEU,gBAAQC,GAAR,CAAY,WAAZ,EAAyB,OAAKlB,WAA9B,EAA2C,iBAA3C,EAA8DY,WAA9D;AACAK,gBAAQC,GAAR,CAAY,4BAAZ,EAA0CX,MAA1C,EAAkD,WAAlD,EAA+DD,GAA/D;AACAF,iBAASG,MAAT,EAAiBD,GAAjB;AACD,OAJD;AAKD;;;sCAEiBK,E,EAAIP,Q,EAAU;AAC9B,WAAKW,WAAL,CAAiBJ,EAAjB,EAAqB,UAACJ,MAAD,EAASD,GAAT,EAAiB;AACpCW,gBAAQC,GAAR,CAAY,wCAAZ,EAAsDX,MAAtD,EAA8D,KAA9D,EAAqED,GAArE;AACD,OAFD;AAGD;;;;;;kBAGYV,e","file":"QuestionManager.js","sourcesContent":["\nclass QuestionManager {\n  constructor(connection) {\n    this.conn = connection;\n    this.table = 'questions';\n    this.answerTable = 'answers';\n  }\n\n  createQuestion(user_id, title, content, callback) {\n    this.conn.insertQuestion(user_id, title, content, (err, result) => {\n      if (err) {\n        callback('error');\n      }\n      this.conn.selectById(this.table, user_id, (res, err) => {\n        if (err) {\n          callback(err);\n        } else {\n          callback(res);\n        }\n      });\n    });\n  }\n\n  getAllQuestion(callback) {\n    this.conn.selectQuestions((result, err) => {\n      if (err) {\n        callback('There was an error retrieving questions');\n      }\n      callback(result);\n    });\n  }\n\n  getQuestion(id, callback) {\n    this.conn.selectById(this.table, id, (result, err) => {\n      if (err) {\n        callback(err);\n      }\n      callback(result);\n    });\n  }\n\n  createAnswer(user_id, question_id, answer, callback) {\n    this.conn.insertAnswer(user_id, question_id, answer, (err, result) => {\n      if (err) {\n        callback(err);\n      }\n      this.getQuestion(question_id, (result, err) => {\n        callback(result);\n      });\n    });\n  }\n\n  getAnswer(question_id, callback) {\n    this.conn.selectAnswer(this.answerTable, question_id, (err, result) => {\n      console.log('Table is ', this.answerTable, 'question id is ', question_id);\n      console.log('Result from geting answer ', result, 'error is ', err);\n      callback(result, err)\n    });\n  }\n\n  getQuestionAnswer(id, callback) {\n    this.getQuestion(id, (result, err) => {\n      console.log('get question from getQuestionAndAnswer', result, 'err', err);\n    })\n  }\n}\n\nexport default QuestionManager;\n"]}