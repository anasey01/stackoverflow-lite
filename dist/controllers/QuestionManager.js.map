{"version":3,"sources":["../../controllers/QuestionManager.js"],"names":["QuestionManager","connection","conn","table","answerTable","userId","questionTitle","questionContent","username","callback","insertQuestion","err","result","rows","selectQuestions","questionId","selectByQuestionId","error","selectQuestionByUsername","questionQuery","searchAllQuestion","match","answer","answerNumber","insertAnswer","answerId","selectOneAnswer","selectQuestionAndAnswer","selectAnswer","updateMarkedAnswer","updateQuestionAnswer","selectMostAnswered","mostAnswer","currentVote","otherVote","insertVotes","vote","selectVotes","allVotes","comment","insertComment","resComment","selectComments","comments","deleteQuestionById"],"mappings":"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","file":"QuestionManager.js","sourcesContent":["\nclass QuestionManager {\n  constructor(connection) {\n    this.conn = connection;\n    this.table = 'questions';\n    this.answerTable = 'answers';\n  }\n\n  createQuestion(userId, questionTitle, questionContent, username, callback) {\n    this.conn.insertQuestion(userId, questionTitle, questionContent, username, (err, result) => {\n      callback(err, result.rows);\n    });\n  }\n\n  getAllQuestion(callback) {\n    this.conn.selectQuestions((result, err) => {\n      if (err) {\n        callback('There was an error retrieving questions');\n      }\n      callback(result);\n    });\n  }\n\n  getQuestion(questionId, callback) {\n    this.conn.selectByQuestionId(this.table, questionId, (error, result) => {\n      callback(error, result);\n    });\n  }\n\n  getUserQuestions(username, callback) {\n    this.conn.selectQuestionByUsername(username, (error, result) => {\n      callback(error, result);\n    });\n  }\n\n  searchQuestion(questionQuery, callback) {\n    this.conn.searchAllQuestion(questionQuery, (error, match) => {\n      callback(error, match);\n    });\n  }\n\n  createAnswer(userId, questionId, answer, answerNumber, username, callback) {\n    this.conn.insertAnswer(userId, questionId, answer, answerNumber, username, (err, result) => {\n      callback(err, result);\n    });\n  }\n\n  getSpecificAnswer(questionId, answerId, callback) {\n    this.conn.selectOneAnswer(questionId, answerId, (result, err) => {\n      callback(result, err);\n    });\n  }\n\n  getQuestionAndAnswer(questionId, callback) {\n    this.conn.selectQuestionAndAnswer(questionId, (err, result) => {\n      callback(err, result);\n    });\n  }\n\n  getAnswer(questionId, callback) {\n    this.conn.selectAnswer(this.answerTable, questionId, (err, result) => {\n      callback(result, err);\n    });\n  }\n\n  markAnswer(answerNumber, callback) {\n    this.conn.updateMarkedAnswer(answerNumber, (err, result) => {\n      if (err) {\n        callback('error');\n      }\n      callback('successfully marked');\n    });\n  }\n\n  updateAnswer(answerNumber, answer, questionId, callback) {\n    this.conn.updateQuestionAnswer(answerNumber, answer, questionId, (err, result) => {\n      callback(err, result.rows);\n    });\n  }\n\n  orderedByMostAnswers(username, callback) {\n    this.conn.selectMostAnswered(username, (error, mostAnswer) => {\n      callback(error, mostAnswer.rows);\n    });\n  }\n\n  createVotes(questionId, answerId, userId, currentVote, otherVote, username, callback) {\n    this.conn.insertVotes(questionId, answerId, userId, currentVote, otherVote, username, (err, vote) => {\n      callback(err, vote);\n    });\n  }\n\n  getVotes(questionId, answerId, callback) {\n    this.conn.selectVotes(questionId, answerId, (err, allVotes) => {\n      callback(err, allVotes);\n    });\n  }\n\n  createComments(userId, questionId, answerId, comment, username, callback) {\n    this.conn.insertComment(userId, questionId, answerId, comment, username, (error, resComment) => {\n      callback(error, resComment);\n    });\n  }\n\n  getAllComments(questionId, callback) {\n    this.conn.selectComments(questionId, (error, comments) => {\n      callback(error, comments);\n    });\n  }\n\n  deleteOne(questionId, callback) {\n    this.conn.deleteQuestionById(this.table, questionId, (result, err) => {\n      callback(result, err);\n    });\n  }\n}\n\nexport default QuestionManager;\n"]}