{"version":3,"sources":["../../controllers/UserManager.js"],"names":["UserManager","connection","conn","table","fullname","gender","username","password","email","callback","selectUserByUsername","err","result","length","createUser","insertUser","userData","storedHashedPassword","correctPassword","bcrypt","compareSync"],"mappings":";;;;;;;;;;AAAA;;;;;;;;IAEMA,W;AACJ,uBAAYC,UAAZ,EAAwB;AAAA;;AACtB,SAAKC,IAAL,GAAYD,UAAZ;AACA,SAAKE,KAAL,GAAa,OAAb;AACD;;;;iCAEYC,Q,EAAUC,M,EAAQC,Q,EAAUC,Q,EAAUC,K,EAAOC,Q,EAAU;AAAA;;AAClE,WAAKP,IAAL,CAAUQ,oBAAV,CAA+BJ,QAA/B,EAAyC,UAACK,GAAD,EAAMC,MAAN,EAAiB;AACxD,YAAID,GAAJ,EAAS;AACPF,mBAASE,GAAT;AACD,SAFD,MAEO,IAAIC,OAAOC,MAAP,GAAgB,CAAhB,IAAqBD,OAAOC,MAAP,KAAkB,CAA3C,EAA8C;AACnD,gBAAKC,UAAL,CAAgBV,QAAhB,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsDC,KAAtD,EAA6DC,QAA7D;AACD,SAFM,MAEA;AACLA,mBAAS,UAAT;AACD;AACF,OARD;AASD;;;+BAEUL,Q,EAAUC,M,EAAQC,Q,EAAUC,Q,EAAUC,K,EAAOC,Q,EAAU;AAChE,WAAKP,IAAL,CAAUa,UAAV,CAAqBX,QAArB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,QAAjD,EAA2DC,KAA3D,EAAkE,UAACG,GAAD,EAAMC,MAAN,EAAiB;AACjF,YAAID,GAAJ,EAAS;AACPF,mBAAS,iCAAT;AACD;AACDA,iBAASG,MAAT;AACD,OALD;AAMD;;;0BAEKN,Q,EAAUC,Q,EAAUE,Q,EAAU;AAClC,WAAKP,IAAL,CAAUQ,oBAAV,CAA+BJ,QAA/B,EAAyC,UAACK,GAAD,EAAMC,MAAN,EAAiB;AACxD,YAAIA,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AACrBJ,mBAAS,gCAAT;AACD,SAFD,MAEO;AACL,cAAMO,WAAWJ,MAAjB;AACA,cAAMK,uBAAuBD,SAAS,CAAT,EAAYT,QAAzC;AACA,cAAMW,kBAAkBC,iBAAOC,WAAP,CAAmBb,QAAnB,EAA6BU,oBAA7B,CAAxB;AACA,cAAI,QAAOL,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IAA8B,CAACM,eAAnC,EAAoD;AAClDT,qBAAS,gCAAT;AACD,WAFD,MAEO;AACLA,qBAASG,MAAT;AACD;AACF;AACF,OAbD;AAcD;;;;;;kBAEYZ,W","file":"UserManager.js","sourcesContent":["import bcrypt from 'bcrypt';\n\nclass UserManager {\n  constructor(connection) {\n    this.conn = connection;\n    this.table = 'users';\n  }\n\n  registerUser(fullname, gender, username, password, email, callback) {\n    this.conn.selectUserByUsername(username, (err, result) => {\n      if (err) {\n        callback(err);\n      } else if (result.length < 1 && result.length !== 1) {\n        this.createUser(fullname, gender, username, password, email, callback);\n      } else {\n        callback('existing');\n      }\n    });\n  }\n\n  createUser(fullname, gender, username, password, email, callback) {\n    this.conn.insertUser(fullname, gender, username, password, email, (err, result) => {\n      if (err) {\n        callback('There was an error adding user!');\n      }\n      callback(result);\n    });\n  }\n\n  login(username, password, callback) {\n    this.conn.selectUserByUsername(username, (err, result) => {\n      if (result.length < 1) {\n        callback('username or password incorrect');\n      } else {\n        const userData = result;\n        const storedHashedPassword = userData[0].password;\n        const correctPassword = bcrypt.compareSync(password, storedHashedPassword);\n        if (typeof result !== 'object' || !correctPassword) {\n          callback('Username or Password incorrect');\n        } else {\n          callback(result);\n        }\n      }\n    });\n  }\n}\nexport default UserManager;\n"]}