{"version":3,"sources":["../../controllers/QuestionRoutes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","QuestionRoute","req","res","getAllQuestion","data","err","status","json","success","message","questions","questionId","params","id","questionData","getQuestion","result","questionid","userId","userid","questionTitle","questiontitle","questionContent","questioncontent","createdAt","createdat","answers","getAnswer","answer","rows","length","forEach","item","push","singleAnswer","body","user","createQuestion","Number","getQuestionAndAnswer","answerNumber","createAnswer","error","answerInfo","getUserQuestions","userQuestions","deleteOne","isDeleted","rowCount","currentUserId","answerData","isAnswer","answernumber","markAnswer","updateAnswer"],"mappings":"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","file":"QuestionRoutes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\r\nimport QuestionManager from './QuestionManager';\r\n\r\nconst db = new DatabaseManager();\r\nconst questionManager = new QuestionManager(db);\r\n\r\nclass QuestionRoute {\r\n  static allQuestion(req, res) {\r\n    questionManager.getAllQuestion((data, err) => {\r\n      if (err) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'No question found',\r\n        });\r\n      }\r\n      return res.status(200).json({ questions: data });\r\n    });\r\n  }\r\n\r\n  static specificQuestion(req, res) {\r\n    const questionId = req.params.id;\r\n    const questionData = {};\r\n    questionManager.getQuestion(questionId, (result) => {\r\n      questionData.success = true;\r\n      questionData.message = 'Questions retrieved';\r\n      questionData.questionId = result.questionid;\r\n      questionData.userId = result.userid;\r\n      questionData.questionTitle = result.questiontitle;\r\n      questionData.questionContent = result.questioncontent;\r\n      questionData.createdAt = result.createdat;\r\n      questionData.answers = [];\r\n      questionManager.getAnswer(questionId, (answer) => {\r\n        if (answer.rows.length > 1) {\r\n          answer.rows.forEach((item) => {\r\n            questionData.answers.push({ item });\r\n          });\r\n          res.status(200).json(questionData);\r\n        }\r\n        if (answer.rows.length === 1) {\r\n          const singleAnswer = answer.rows;\r\n          questionData.answers.push({ singleAnswer });\r\n          res.status(200).json(questionData);\r\n        }\r\n      });\r\n      res.status(200).json(questionData);\r\n    });\r\n  }\r\n\r\n  static postQuestion(req, res) {\r\n    const { questionTitle, questionContent } = req.body;\r\n    const { userId } = req.user;\r\n    questionManager.createQuestion(userId, questionTitle, questionContent, (err, result) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'unable to create question',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'question successfully created',\r\n        userId: result[0].userid,\r\n        questionId: result[0].questionid,\r\n        questionTitle: result[0].questiontitle,\r\n        questionContent: result[0].questioncontent,\r\n        createdAt: result[0].createdat,\r\n      });\r\n    });\r\n  }\r\n\r\n  static addAnswer(req, res) {\r\n    const questionId = Number(req.params.id);\r\n    const { userId } = req.user;\r\n    const { answer } = req.body;\r\n    questionManager.getQuestionAndAnswer(questionId, (err, result) => {\r\n      const answerNumber = result.length + 1;\r\n      questionManager.createAnswer(userId, questionId, answer, answerNumber, (error, data) => {\r\n        if (error) {\r\n          res.status(500).json({\r\n            success: false,\r\n            message: 'Unable to add answer',\r\n          });\r\n        }\r\n        const answerInfo = data.rows[0];\r\n        res.status(200).json({\r\n          success: true,\r\n          message: 'Your answer has been successfully added',\r\n          answerInfo,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  static getAllQuestionsByUser(req, res) {\r\n    const { userId } = req.user;\r\n    questionManager.getUserQuestions(userId, (error, result) => {\r\n      const userQuestions = result;\r\n      if (error) {\r\n        res.status(500).json({\r\n          success: false,\r\n          message: 'unable to retrieve questions',\r\n        });\r\n      } else {\r\n        res.status(200).json({\r\n          success: true,\r\n          message: 'All Questions by User',\r\n          userQuestions,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  static deleteQuestion(req, res) {\r\n    const { id } = req.params;\r\n    questionManager.deleteOne(id, (result, err) => {\r\n      let isDeleted = '';\r\n      if (result.rowCount === 1) {\r\n        isDeleted = 'deleted';\r\n      }\r\n      if (isDeleted === 'deleted') {\r\n        return res.status(200).json({\r\n          success: true,\r\n          message: 'Question deleted!',\r\n        });\r\n      }\r\n      if (isDeleted === '') {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: 'Unable to delete question',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  static updateAnswer(req, res) {\r\n    const { questionId, answerNumber } = req.params;\r\n    const currentUserId = req.user.userId;\r\n    const { answer } = req.body;\r\n    questionManager.getQuestionAndAnswer(questionId, (err, result) => {\r\n      const answerData = [];\r\n      let isAnswer = 'not found';\r\n      result.forEach((item) => {\r\n        if (item.answernumber === Number(answerNumber)) {\r\n          isAnswer = 'found';\r\n          return answerData.push(item);\r\n        }\r\n      });\r\n      if (isAnswer === 'found') {\r\n        if (currentUserId === Number(questionId)) {\r\n          questionManager.markAnswer(answerNumber, (result) => {\r\n            if (result === 'successfully marked') {\r\n              res.status(200).json({\r\n                success: true,\r\n                message: 'Answer marked as approved!',\r\n              });\r\n            } else {\r\n              res.status(500).json({\r\n                success: false,\r\n                message: 'unable to mark answer',\r\n              });\r\n            }\r\n          });\r\n        } else if (currentUserId === answerData[0].userid) {\r\n          questionManager.updateAnswer(answerNumber, answer, (error, answerInfo) => {\r\n            if (error) {\r\n              res.status(500).json({\r\n                success: false,\r\n                message: 'Unable to update Answer',\r\n              });\r\n            } else {\r\n              res.status(200).json({\r\n                success: true,\r\n                message: 'Your answer has been updated',\r\n                answerInfo,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: isAnswer,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  static notFound(req, res) {\r\n    res.status(404).json({\r\n      status: false,\r\n      message: 'Not Found!',\r\n    });\r\n  }\r\n}\r\n\r\nexport default QuestionRoute;\r\n"]}