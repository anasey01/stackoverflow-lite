{"version":3,"sources":["../../controllers/QuestionRoutes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","QuestionRoute","req","res","getAllQuestion","data","err","status","json","success","message","questions","questionId","params","id","questionData","getQuestion","result","questionid","userId","userid","questionTitle","questiontitle","questionContent","questioncontent","createdAt","createdat","answers","getAnswer","answer","rows","length","forEach","item","push","singleAnswer","body","user","createQuestion","error","Number","questionAndAnswer","createAnswer","results","deleteOne","isDeleted","rowCount","answerId","currentUserId","getSpecificAnswer","answerResult","userAnswer","questionUserId","markAnswer","ansResult","updateAnswer"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,KAAK,IAAIC,yBAAJ,EAAX;AACA,IAAMC,kBAAkB,IAAIC,yBAAJ,CAAoBH,EAApB,CAAxB;;IAEMI,a;;;;;;;gCACeC,G,EAAKC,G,EAAK;AAC3BJ,sBAAgBK,cAAhB,CAA+B,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC5C,YAAIA,GAAJ,EAAS;AACP,iBAAOH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,WAAWN,IAAb,EAArB,CAAP;AACD,OARD;AASD;;;qCAEuBH,G,EAAKC,G,EAAK;AAChC,UAAMS,aAAaV,IAAIW,MAAJ,CAAWC,EAA9B;AACA,UAAMC,eAAe,EAArB;AACAhB,sBAAgBiB,WAAhB,CAA4BJ,UAA5B,EAAwC,UAACK,MAAD,EAAY;AAClDF,qBAAaN,OAAb,GAAuB,IAAvB;AACAM,qBAAaL,OAAb,GAAuB,qBAAvB;AACAK,qBAAaH,UAAb,GAA0BK,OAAOC,UAAjC;AACAH,qBAAaI,MAAb,GAAsBF,OAAOG,MAA7B;AACAL,qBAAaM,aAAb,GAA6BJ,OAAOK,aAApC;AACAP,qBAAaQ,eAAb,GAA+BN,OAAOO,eAAtC;AACAT,qBAAaU,SAAb,GAAyBR,OAAOS,SAAhC;AACAX,qBAAaY,OAAb,GAAuB,EAAvB;AACA5B,wBAAgB6B,SAAhB,CAA0BhB,UAA1B,EAAsC,UAACiB,MAAD,EAAY;AAChD,cAAIA,OAAOC,IAAP,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BF,mBAAOC,IAAP,CAAYE,OAAZ,CAAoB,UAACC,IAAD,EAAU;AAC5BlB,2BAAaY,OAAb,CAAqBO,IAArB,CAA0B,EAAED,UAAF,EAA1B;AACD,aAFD;AAGA9B,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,YAArB;AACD;AACD,cAAIc,OAAOC,IAAP,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,gBAAMI,eAAeN,OAAOC,IAA5B;AACAf,yBAAaY,OAAb,CAAqBO,IAArB,CAA0B,EAAEC,0BAAF,EAA1B;AACAhC,gBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,YAArB;AACD;AACF,SAZD;AAaAZ,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,YAArB;AACD,OAvBD;AAwBD;;;iCAEmBb,G,EAAKC,G,EAAK;AAAA,sBACeD,IAAIkC,IADnB;AAAA,UACpBf,aADoB,aACpBA,aADoB;AAAA,UACLE,eADK,aACLA,eADK;AAAA,UAEpBJ,MAFoB,GAETjB,IAAImC,IAFK,CAEpBlB,MAFoB;;AAG5BpB,sBAAgBuC,cAAhB,CAA+BnB,MAA/B,EAAuCE,aAAvC,EAAsDE,eAAtD,EAAuE,UAACN,MAAD,EAAY;AACjF,YAAIsB,QAAQ,KAAZ;AACA,YAAItB,WAAW,OAAf,EAAwB;AACtBsB,kBAAQ,IAAR;AACD;;AAED,YAAIA,KAAJ,EAAW;AACT,iBAAOpC,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,eAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,IADiB;AAE1BC,mBAAS,+BAFiB;AAG1BU,kBAAQH,OAAOG,MAHW;AAI1BF,sBAAYD,OAAOC,UAJO;AAK1BI,yBAAeL,OAAOK,aALI;AAM1BE,2BAAiBP,OAAOO;AANE,SAArB,CAAP;AAQD,OApBD;AAqBD;;;8BAEgBtB,G,EAAKC,G,EAAK;AACzB,UAAMS,aAAa4B,OAAOtC,IAAIW,MAAJ,CAAWC,EAAlB,CAAnB;AADyB,UAEjBe,MAFiB,GAEN3B,IAAIkC,IAFE,CAEjBP,MAFiB;;AAGzB9B,sBAAgBiB,WAAhB,CAA4BJ,UAA5B,EAAwC,UAACK,MAAD,EAAY;AAClD,YAAMwB,oBAAoB;AACxBhC,mBAAS,IADe;AAExBC,iDAAqCE,UAFb;AAGxBA,sBAAYK,OAAOC,UAHK;AAIxBC,kBAAQF,OAAOG,MAJS;AAKxBC,yBAAeJ,OAAOK,aALE;AAMxBC,2BAAiBN,OAAOO,eANA;AAOxBC,qBAAWR,OAAOS,SAPM;AAQxBC,mBAAS;AARe,SAA1B;;AAWA,YAAIV,OAAOK,aAAP,IAAwBL,OAAOO,eAAnC,EAAoD;AAAA,cAC1CL,MAD0C,GAC/BjB,IAAImC,IAD2B,CAC1ClB,MAD0C;;AAElDpB,0BAAgB2C,YAAhB,CAA6BvB,MAA7B,EAAqCP,UAArC,EAAiDiB,MAAjD,EAAyD,UAACc,OAAD,EAAUrC,GAAV,EAAkB;AACzE,gBAAIqC,QAAQb,IAAR,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3BY,sBAAQb,IAAR,CAAaE,OAAb,CAAqB,UAACC,IAAD,EAAU;AAC7BQ,kCAAkBd,OAAlB,CAA0BO,IAA1B,CAA+BD,IAA/B;AACD,eAFD;AAGA9B,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiC,iBAArB;AACD;AACD,gBAAIE,QAAQb,IAAR,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,kBAAMI,eAAeQ,QAAQb,IAA7B;AACAW,gCAAkBd,OAAlB,CAA0BO,IAA1B,CAA+BC,YAA/B;AACAhC,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiC,iBAArB;AACD;AACF,WAZD;AAaD,SAfD,MAeO;AACLtC,cAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,qBAAS,KADU;AAEnBC,qBAAS;AAFU,WAArB;AAID;AACF,OAjCD;AAkCD;;;mCAEqBR,G,EAAKC,G,EAAK;AAAA,UACtBW,EADsB,GACfZ,IAAIW,MADW,CACtBC,EADsB;;AAE9Bf,sBAAgB6C,SAAhB,CAA0B9B,EAA1B,EAA8B,UAACG,MAAD,EAASX,GAAT,EAAiB;AAC7C,YAAIuC,YAAY,EAAhB;AACA,YAAI5B,OAAO6B,QAAP,KAAoB,CAAxB,EAA2B;AACzBD,sBAAY,SAAZ;AACD;AACD,YAAIA,cAAc,SAAlB,EAA6B;AAC3B,iBAAO1C,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,IADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,YAAImC,cAAc,EAAlB,EAAsB;AACpB,iBAAO1C,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACF,OAjBD;AAkBD;;;mCAGqBR,G,EAAKC,G,EAAK;AAAA,wBACGD,IAAIW,MADP;AAAA,UACtBD,UADsB,eACtBA,UADsB;AAAA,UACVmC,QADU,eACVA,QADU;;AAE9B,UAAMC,gBAAgB9C,IAAImC,IAAJ,CAASlB,MAA/B;AACApB,sBAAgBkD,iBAAhB,CAAkCrC,UAAlC,EAA8CmC,QAA9C,EAAwD,UAACzC,GAAD,EAAM4C,YAAN,EAAuB;AAC7EhD,YAAIiD,UAAJ,GAAiBD,YAAjB;AACD,OAFD;AAGAnD,sBAAgBiB,WAAhB,CAA4BJ,UAA5B,EAAwC,UAACK,MAAD,EAAY;AAClD,YAAMmC,iBAAiBnC,OAAOG,MAA9B;AACA,YAAI4B,kBAAkBI,cAAtB,EAAsC;AACpCrD,0BAAgBsD,UAAhB,CAA2BN,QAA3B,EAAqC,UAACO,SAAD,EAAe;AAClD,gBAAIA,cAAc,qBAAlB,EAAyC;AACvCnD,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,yBAAS,IADU;AAEnBC,yBAAS;AAFU,eAArB;AAID,aALD,MAKO;AACLP,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,yBAAS,KADU;AAEnBC,yBAAS;AAFU,eAArB;AAID;AACF,WAZD;AAaD,SAdD,MAcO,IAAIsC,kBAAkB9C,IAAIiD,UAAJ,CAAe/B,MAArC,EAA6C;AAAA,cAC1CS,MAD0C,GAC/B3B,IAAIkC,IAD2B,CAC1CP,MAD0C;;AAElD9B,0BAAgBwD,YAAhB,CAA6BR,QAA7B,EAAuClB,MAAvC,EAA+C,UAACyB,SAAD,EAAe;AAC5D,gBAAIA,cAAc,gBAAlB,EAAoC;AAClCnD,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,yBAAS,IADU;AAEnBC,yBAAS;AAFU,eAArB;AAID,aALD,MAKO;AACLP,kBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,yBAAS,KADU;AAEnBC,yBAAS;AAFU,eAArB;AAID;AACF,WAZD;AAaD,SAfM,MAeA;AACLP,cAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,qBAAS,KADU;AAEnBC,qBAAS;AAFU,WAArB;AAID;AACF,OArCD;AAsCD;;;6BAEeR,G,EAAKC,G,EAAK;AACxBA,UAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAQ,KADW;AAEnBG,iBAAS;AAFU,OAArB;AAID;;;;;;kBAGYT,a","file":"QuestionRoutes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\nimport QuestionManager from './QuestionManager';\n\nconst db = new DatabaseManager();\nconst questionManager = new QuestionManager(db);\n\nclass QuestionRoute {\n  static allQuestion(req, res) {\n    questionManager.getAllQuestion((data, err) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          message: 'No question found',\n        });\n      }\n      return res.status(200).json({ questions: data });\n    });\n  }\n\n  static specificQuestion(req, res) {\n    const questionId = req.params.id;\n    const questionData = {};\n    questionManager.getQuestion(questionId, (result) => {\n      questionData.success = true;\n      questionData.message = 'Questions retrieved';\n      questionData.questionId = result.questionid;\n      questionData.userId = result.userid;\n      questionData.questionTitle = result.questiontitle;\n      questionData.questionContent = result.questioncontent;\n      questionData.createdAt = result.createdat;\n      questionData.answers = [];\n      questionManager.getAnswer(questionId, (answer) => {\n        if (answer.rows.length > 1) {\n          answer.rows.forEach((item) => {\n            questionData.answers.push({ item });\n          });\n          res.status(200).json(questionData);\n        }\n        if (answer.rows.length === 1) {\n          const singleAnswer = answer.rows;\n          questionData.answers.push({ singleAnswer });\n          res.status(200).json(questionData);\n        }\n      });\n      res.status(200).json(questionData);\n    });\n  }\n\n  static postQuestion(req, res) {\n    const { questionTitle, questionContent } = req.body;\n    const { userId } = req.user;\n    questionManager.createQuestion(userId, questionTitle, questionContent, (result) => {\n      let error = false;\n      if (result === 'error') {\n        error = true;\n      }\n\n      if (error) {\n        return res.status(400).json({\n          success: false,\n          message: 'unable to create question',\n        });\n      }\n      return res.status(200).json({\n        success: true,\n        message: 'question successfully created',\n        userid: result.userid,\n        questionid: result.questionid,\n        questiontitle: result.questiontitle,\n        questioncontent: result.questioncontent,\n      });\n    });\n  }\n\n  static addAnswer(req, res) {\n    const questionId = Number(req.params.id);\n    const { answer } = req.body;\n    questionManager.getQuestion(questionId, (result) => {\n      const questionAndAnswer = {\n        success: true,\n        message: `Answer added to question ${questionId}`,\n        questionId: result.questionid,\n        userId: result.userid,\n        questionTitle: result.questiontitle,\n        questionContent: result.questioncontent,\n        createdAt: result.createdat,\n        answers: [],\n      };\n\n      if (result.questiontitle && result.questioncontent) {\n        const { userId } = req.user;\n        questionManager.createAnswer(userId, questionId, answer, (results, err) => {\n          if (results.rows.length > 1) {\n            results.rows.forEach((item) => {\n              questionAndAnswer.answers.push(item);\n            });\n            res.status(200).json(questionAndAnswer);\n          }\n          if (results.rows.length === 1) {\n            const singleAnswer = results.rows;\n            questionAndAnswer.answers.push(singleAnswer);\n            res.status(200).json(questionAndAnswer);\n          }\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          message: 'No Answer found',\n        });\n      }\n    });\n  }\n\n  static deleteQuestion(req, res) {\n    const { id } = req.params;\n    questionManager.deleteOne(id, (result, err) => {\n      let isDeleted = '';\n      if (result.rowCount === 1) {\n        isDeleted = 'deleted';\n      }\n      if (isDeleted === 'deleted') {\n        return res.status(200).json({\n          success: true,\n          message: 'Question deleted!',\n        });\n      }\n      if (isDeleted === '') {\n        return res.status(401).json({\n          success: false,\n          message: 'Unable to delete question',\n        });\n      }\n    });\n  }\n\n\n  static updateQuestion(req, res) {\n    const { questionId, answerId } = req.params;\n    const currentUserId = req.user.userId;\n    questionManager.getSpecificAnswer(questionId, answerId, (err, answerResult) => {\n      req.userAnswer = answerResult;\n    });\n    questionManager.getQuestion(questionId, (result) => {\n      const questionUserId = result.userid;\n      if (currentUserId === questionUserId) {\n        questionManager.markAnswer(answerId, (ansResult) => {\n          if (ansResult === 'successfully marked') {\n            res.status(200).json({\n              success: true,\n              message: 'Answer marked as approved!',\n            });\n          } else {\n            res.status(500).json({\n              success: false,\n              message: 'unable to mark answer',\n            });\n          }\n        });\n      } else if (currentUserId === req.userAnswer.userid) {\n        const { answer } = req.body;\n        questionManager.updateAnswer(answerId, answer, (ansResult) => {\n          if (ansResult === 'answer updated') {\n            res.status(200).json({\n              success: true,\n              message: 'Your answer has been updated',\n            });\n          } else {\n            res.status(500).json({\n              success: false,\n              message: 'Not updated, try again',\n            });\n          }\n        });\n      } else {\n        res.status(401).json({\n          success: false,\n          message: 'Not authorized to approve answer',\n        });\n      }\n    });\n  }\n\n  static notFound(req, res) {\n    res.status(404).json({\n      status: false,\n      message: 'Not Found!',\n    });\n  }\n}\n\nexport default QuestionRoute;\n"]}