{"version":3,"sources":["../../controllers/QuestionRoutes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","QuestionRoute","req","res","getAllQuestion","data","err","status","json","success","message","questionId","params","id","getQuestion","result","title","body","content","userId","user","_id","createQuestion","error","Number","answer","questionAndAnswer","user_id","created","created_at","answers","createAnswer","results","rows","length","forEach","item","push","singleAnswer"],"mappings":"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","file":"QuestionRoutes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\nimport QuestionManager from './QuestionManager';\n\nconst db = new DatabaseManager();\nconst questionManager = new QuestionManager(db);\n\nclass QuestionRoute {\n  static allQuestion(req, res) {\n    questionManager.getAllQuestion((data, err) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          message: 'No question found',\n        });\n      }\n      return res.status(200).json(data);\n    });\n  }\n\n  static specificQuestion(req, res) {\n    const questionId = req.params.id;\n    questionManager.getQuestion(questionId, result => res.status(200).json(result));\n  }\n\n  static postQuestion(req, res) {\n    const title = req.body.title;\n    const content = req.body.content;\n    const userId = req.user._id;\n    questionManager.createQuestion(userId, title, content, (result) => {\n      let error = false;\n      if (result === 'error') {\n        error = true;\n      }\n\n      if (error) {\n        return res.status(400).json({\n          success: false,\n          message: 'unable to create question',\n        });\n      }\n      return res.status(200).json({\n        success: true,\n        message: 'question successfully created',\n        id: userId,\n        title,\n        content,\n      });\n    });\n  }\n\n  static addAnswer(req, res) {\n    const id = Number(req.params.id);\n    const answer = req.body;\n    questionManager.getQuestion(id, (result) => {\n      let questionAndAnswer = {\n        id: result.id,\n        userId: result.user_id,\n        title: result.title,\n        content: result.content,\n        created: result.created_at,\n        answers: [],\n      };\n      if (result.title && result.content) {\n        const userId = questionAndAnswer.userId;\n        questionManager.createAnswer(userId, id, answer, (results, err) => {\n          if (results.rows.length > 1) {\n            results.rows.forEach((item) => {\n              questionAndAnswer.answers.push(item);\n            });\n            res.status(200).json(questionAndAnswer);\n          }\n          if (results.rows.length === 1) {\n            const singleAnswer = results.rows;\n            questionAndAnswer.answers.push({ singleAnswer });\n            res.status(200).json(questionAndAnswer);\n          }\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          message: 'No Answer found',\n        });\n      }\n    });\n  }\n\n  static notFound(req, res) {\n    res.status(404).json({\n      status: false,\n      message: 'Not Found!',\n    });\n  }\n}\n\nexport default QuestionRoute;\n"]}