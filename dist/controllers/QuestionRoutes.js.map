{"version":3,"sources":["../../controllers/QuestionRoutes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","QuestionRoute","req","res","getAllQuestion","data","err","status","json","success","message","questionId","params","id","getQuestion","result","title","body","content","userId","user","_id","createQuestion","error","Number","answer","user_id","createAnswer","results","questionAndAnswer","created","created_at","answers","getAnswer","console","log"],"mappings":"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","file":"QuestionRoutes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\nimport QuestionManager from './QuestionManager';\n\nconst db = new DatabaseManager();\nconst questionManager = new QuestionManager(db);\n\nclass QuestionRoute {\n\n  static allQuestion(req, res) {\n    questionManager.getAllQuestion((data, err) => {\n      if (err) {\n        return res.status(404).json({\n          success: false,\n          message: 'No question found',\n        });\n      }\n      return res.status(200).json(data);\n    });\n  }\n\n  static specificQuestion(req, res) {\n    const questionId = req.params.id;\n    questionManager.getQuestion(questionId, result => res.status(200).json(result));\n  }\n\n  static postQuestion(req, res) {\n    const title = req.body.title;\n    const content = req.body.content;\n    const userId = req.user._id;\n    questionManager.createQuestion(userId, title, content, (result) => {\n      let error = false;\n      if (result === 'error') {\n        error = true;\n      }\n\n      if (error) {\n        return res.status(400).json({\n          success: false,\n          message: 'unable to create question',\n        });\n      } else {\n        return  res.status(200).json({\n          success: true,\n          message: 'question successfully created',\n          id: userId,\n          title,\n          content,\n        });\n      }\n    });\n  }\n\n  static addAnswer(req, res) {\n    const id = Number(req.params.id);\n    const answer = req.body.answer;\n    questionManager.getQuestion(id, (result) => {\n      if (result.title && result.content) {\n        const user_id = req.user._id;\n        questionManager.createAnswer(user_id, id, answer, (results, err) => {\n          let questionAndAnswer = {\n            title : results.title,\n            content: results.content,\n            created : results.created_at,\n            answers: [],\n          };\n          questionManager.getAnswer(Number(results.id), (answers, err) => {\n            console.log('Answer gotten', answers, 'And err', err);\n          });\n        });\n      }\n    });\n    res.status(200).json({\n\n    });\n  }\n\n  static notFound(req, res) {\n    res.status(404).json({\n      status: false,\n      message: 'Not Found!',\n    });\n  }\n}\n\nexport default QuestionRoute;\n"]}