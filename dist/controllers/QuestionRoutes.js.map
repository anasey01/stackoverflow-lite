{"version":3,"sources":["../../controllers/QuestionRoutes.js"],"names":["db","DatabaseManager","questionManager","QuestionManager","QuestionRoute","req","res","getAllQuestion","data","err","status","json","success","message","questions","questionId","params","id","getQuestion","error","result","question","body","questionTitle","questionContent","user","userId","username","createQuestion","userid","questionid","questiontitle","questioncontent","createdAt","createdat","Number","answer","getQuestionAndAnswer","answerNumber","length","createAnswer","answerInfo","rows","getUserQuestions","userQuestions","deleteOne","isDeleted","rowCount","updateAnswer","answerUpdate"],"mappings":"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","file":"QuestionRoutes.js","sourcesContent":["import DatabaseManager from '../net/DatabaseManager';\r\nimport QuestionManager from './QuestionManager';\r\n\r\nconst db = new DatabaseManager();\r\nconst questionManager = new QuestionManager(db);\r\n\r\nclass QuestionRoute {\r\n  static allQuestion(req, res) {\r\n    questionManager.getAllQuestion((data, err) => {\r\n      if (err) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'No question found',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'All Questions Retrieved',\r\n        questions: data,\r\n      });\r\n    });\r\n  }\r\n\r\n  static specificQuestion(req, res) {\r\n    const questionId = req.params.id;\r\n    questionManager.getQuestion(questionId, (error, result) => {\r\n      const question = result;\r\n      if (error) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'Failed to fetch question',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'successfully fetched question',\r\n        question,\r\n      });\r\n    });\r\n  }\r\n\r\n  static postQuestion(req, res) {\r\n    const { questionTitle, questionContent } = req.body;\r\n    const { userId, username } = req.user;\r\n    questionManager.createQuestion(userId, questionTitle, questionContent, username, (err, result) => {\r\n      if (err) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'unable to create question',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'question successfully created',\r\n        username: result[0].username,\r\n        userId: result[0].userid,\r\n        questionId: result[0].questionid,\r\n        questionTitle: result[0].questiontitle,\r\n        questionContent: result[0].questioncontent,\r\n        createdAt: result[0].createdat,\r\n      });\r\n    });\r\n  }\r\n\r\n  static addAnswer(req, res) {\r\n    const questionId = Number(req.params.id);\r\n    const { userId, username } = req.user;\r\n    const { answer } = req.body;\r\n    questionManager.getQuestionAndAnswer(questionId, (err, result) => {\r\n      if (err) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'unable to retrieve answers',\r\n        });\r\n      }\r\n      const answerNumber = result.length + 1;\r\n      questionManager.createAnswer(userId, questionId, answer, answerNumber, username, (error, data) => {\r\n        if (error) {\r\n          return res.status(500).json({\r\n            success: false,\r\n            message: 'Unable to add answer',\r\n          });\r\n        }\r\n        const answerInfo = data.rows[0];\r\n        return res.status(200).json({\r\n          success: true,\r\n          message: 'Your answer has been successfully added',\r\n          answerInfo,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  static getAnswer(req, res) {\r\n    const questionId = Number(req.params.id);\r\n    questionManager.getQuestionAndAnswer(questionId, (err, result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: result,\r\n      });\r\n    });\r\n  }\r\n\r\n  static getAllQuestionsByUser(req, res) {\r\n    const { userId } = req.user;\r\n    questionManager.getUserQuestions(userId, (error, result) => {\r\n      const userQuestions = result;\r\n      if (error) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'unable to retrieve questions',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'All Questions by User',\r\n        userQuestions,\r\n      });\r\n    });\r\n  }\r\n\r\n  static deleteQuestion(req, res) {\r\n    const { id } = req.params;\r\n    questionManager.deleteOne(id, (result, err) => {\r\n      let isDeleted = '';\r\n      if (result.rowCount === 1) {\r\n        isDeleted = 'deleted';\r\n      }\r\n      if (isDeleted === 'deleted') {\r\n        return res.status(200).json({\r\n          success: true,\r\n          message: 'Question deleted!',\r\n        });\r\n      }\r\n      if (isDeleted === '') {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: 'Unable to delete question',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  static updateAnswer(req, res) {\r\n    const { questionId, answerNumber } = req.params;\r\n    const { answer } = req.body;\r\n    questionManager.updateAnswer(answerNumber, answer, questionId, (error, answerUpdate) => {\r\n      if (error) {\r\n        return res.status(500).json({\r\n          success: false,\r\n          message: 'Unable to update Answer',\r\n        });\r\n      }\r\n      return res.status(200).json({\r\n        success: true,\r\n        message: 'Your answer has been updated',\r\n        answer: answerUpdate[0],\r\n      });\r\n    });\r\n  }\r\n\r\n  static notFound(req, res) {\r\n    return res.status(404).json({\r\n      status: false,\r\n      message: 'Not Found!',\r\n    });\r\n  }\r\n}\r\n\r\nexport default QuestionRoute;\r\n"]}