{"version":3,"sources":["../../controllers/UsersRoute.js"],"names":["db","DatabaseManager","userManager","UserManager","UsersRoutes","req","res","body","username","password","login","result","userid","status","json","success","message","token","jwt","sign","userId","process","env","PRIVATE_KEY","expiresIn","header","fullname","gender","email","registerUser"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,KAAK,IAAIC,yBAAJ,EAAX;AACA,IAAMC,cAAc,IAAIC,qBAAJ,CAAgBH,EAAhB,CAApB;;IAEMI,W;;;;;;;0BACSC,G,EAAKC,G,EAAK;AAAA,sBACUD,IAAIE,IADd;AAAA,UACbC,QADa,aACbA,QADa;AAAA,UACHC,QADG,aACHA,QADG;;AAErBP,kBAAYQ,KAAZ,CAAkBF,QAAlB,EAA4BC,QAA5B,EAAsC,UAACE,MAAD,EAAY;AAChD,YAAI,CAACA,OAAO,CAAP,EAAUC,MAAf,EAAuB;AACrB,iBAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,YAAMC,QAAQC,uBAAIC,IAAJ,CACZ;AACEC,kBAAQT,OAAO,CAAP,EAAUC,MADpB;AAEEJ,oBAAUG,OAAO,CAAP,EAAUH;AAFtB,SADY,EAITa,QAAQC,GAAR,CAAYC,WAJH,EAKZ,EAAEC,WAAW,IAAb,EALY,CAAd;AAOA,eAAOlB,IAAImB,MAAJ,CAAW,cAAX,EAA2BR,KAA3B,EAAkCJ,MAAlC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD;AACxDC,mBAAS,IAD+C;AAExDC,mBAAS,wBAF+C;AAGxDR,oBAAUG,OAAO,CAAP,EAAUH,QAHoC;AAIxDS;AAJwD,SAAnD,CAAP;AAMD,OApBD;AAqBD;;;2BAEaZ,G,EAAKC,G,EAAK;AAAA,uBAGlBD,IAAIE,IAHc;AAAA,UAEpBmB,QAFoB,cAEpBA,QAFoB;AAAA,UAEVC,MAFU,cAEVA,MAFU;AAAA,UAEFnB,QAFE,cAEFA,QAFE;AAAA,UAEQC,QAFR,cAEQA,QAFR;AAAA,UAEkBmB,KAFlB,cAEkBA,KAFlB;;AAItB1B,kBAAY2B,YAAZ,CAAyBH,QAAzB,EAAmCC,MAAnC,EAA2CnB,QAA3C,EAAqDC,QAArD,EAA+DmB,KAA/D,EAAsE,UAACjB,MAAD,EAAY;AAChF,YAAIA,WAAW,UAAf,EAA2B;AACzB,iBAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,KADiB;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAID;AACD,YAAMC,QAAQC,uBAAIC,IAAJ,CAAS;AACrBX,oBAAUG,OAAOH,QADI;AAErBoB,iBAAOjB,OAAOiB;AAFO,SAAT,EAGXP,QAAQC,GAAR,CAAYC,WAHD,CAAd;AAIA,eAAOjB,IAAImB,MAAJ,CAAW,cAAX,EAA2BR,KAA3B,EAAkCJ,MAAlC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD;AACxDC,mBAAS,IAD+C;AAExDC,mBAAS;AAF+C,SAAnD,CAAP;AAID,OAfD;AAgBD;;;;;;kBAGYZ,W","file":"UsersRoute.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport UserManager from './UserManager';\r\nimport DatabaseManager from '../net/DatabaseManager';\r\n\r\nconst db = new DatabaseManager();\r\nconst userManager = new UserManager(db);\r\n\r\nclass UsersRoutes {\r\n  static login(req, res) {\r\n    const { username, password } = req.body;\r\n    userManager.login(username, password, (result) => {\r\n      if (!result[0].userid) {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: 'username or password incorrect',\r\n        });\r\n      }\r\n      const token = jwt.sign(\r\n        {\r\n          userId: result[0].userid,\r\n          username: result[0].username,\r\n        }, process.env.PRIVATE_KEY,\r\n        { expiresIn: '5h' },\r\n      );\r\n      return res.header('x-auth-token', token).status(200).json({\r\n        success: true,\r\n        message: 'Successfully logged in',\r\n        username: result[0].username,\r\n        token,\r\n      });\r\n    });\r\n  }\r\n\r\n  static signup(req, res) {\r\n    const {\r\n      fullname, gender, username, password, email,\r\n    } = req.body;\r\n    userManager.registerUser(fullname, gender, username, password, email, (result) => {\r\n      if (result === 'existing') {\r\n        return res.status(401).json({\r\n          success: false,\r\n          message: 'username or email exists',\r\n        });\r\n      }\r\n      const token = jwt.sign({\r\n        username: result.username,\r\n        email: result.email,\r\n      }, process.env.PRIVATE_KEY);\r\n      return res.header('x-auth-token', token).status(200).json({\r\n        success: true,\r\n        message: 'user succesfully registered',\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersRoutes;\r\n"]}