{"version":3,"sources":["../../controllers/UsersRoute.js"],"names":["db","DatabaseManager","userManager","UserManager","UsersRoutes","login","req","res","body","username","password","result","userid","status","json","success","message","token","jwt","sign","userId","process","env","PRIVATE_KEY","header","signup","fullname","gender","email","registerUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,KAAK,IAAIC,yBAAJ,EAAX;AACA,IAAMC,cAAc,IAAIC,qBAAJ,CAAgBH,EAAhB,CAApB;;AAEA,IAAMI,cAAc;AAClBC,OADkB,iBACZC,GADY,EACPC,GADO,EACF;AACdL,gBAAYG,KAAZ,CAAkBC,IAAIE,IAAJ,CAASC,QAA3B,EAAqCH,IAAIE,IAAJ,CAASE,QAA9C,EAAwD,UAACC,MAAD,EAAY;AAClE,UAAI,CAACA,OAAO,CAAP,EAAUC,MAAf,EAAuB;AACrB,eAAOL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,KADiB;AAE1BC,mBAAS;AAFiB,SAArB,CAAP;AAID;AACD,UAAMC,QAAQC,uBAAIC,IAAJ,CACZ;AACEC,gBAAQT,OAAO,CAAP,EAAUC,MADpB;AAEEH,kBAAUE,OAAO,CAAP,EAAUF;AAFtB,OADY,EAITY,QAAQC,GAAR,CAAYC,WAJH,CAAd;AAMA,aAAOhB,IAAIiB,MAAJ,CAAW,cAAX,EAA2BP,KAA3B,EAAkCJ,MAAlC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD;AACxDC,iBAAS,IAD+C;AAExDC,iBAAS,wBAF+C;AAGxDC;AAHwD,OAAnD,CAAP;AAKD,KAlBD;AAmBD,GArBiB;AAuBlBQ,QAvBkB,kBAuBXnB,GAvBW,EAuBNC,GAvBM,EAuBD;AAAA,oBAGXD,IAAIE,IAHO;AAAA,QAEbkB,QAFa,aAEbA,QAFa;AAAA,QAEHC,MAFG,aAEHA,MAFG;AAAA,QAEKlB,QAFL,aAEKA,QAFL;AAAA,QAEeC,QAFf,aAEeA,QAFf;AAAA,QAEyBkB,KAFzB,aAEyBA,KAFzB;;AAIf1B,gBAAY2B,YAAZ,CAAyBH,QAAzB,EAAmCC,MAAnC,EAA2ClB,QAA3C,EAAqDC,QAArD,EAA+DkB,KAA/D,EAAsE,UAACjB,MAAD,EAAY;AAChF,UAAIA,WAAW,UAAf,EAA2B;AACzBJ,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,KADU;AAEnBC,mBAAS;AAFU,SAArB;AAID,OALD,MAKO;AACL,YAAMC,QAAQC,uBAAIC,IAAJ,CAAS;AACrBV,oBAAUE,OAAOF,QADI;AAErBmB,iBAAOjB,OAAOiB;AAFO,SAAT,EAGXP,QAAQC,GAAR,CAAYC,WAHD,CAAd;AAIAhB,YAAIiB,MAAJ,CAAW,cAAX,EAA2BP,KAA3B,EAAkCJ,MAAlC,CAAyC,GAAzC,EAA8CC,IAA9C,CAAmD;AACjDC,mBAAS,IADwC;AAEjDC,mBAAS;AAFwC,SAAnD;AAID;AACF,KAhBD;AAiBD;AA5CiB,CAApB;;kBA+CeZ,W","file":"UsersRoute.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport UserManager from './UserManager';\nimport DatabaseManager from '../net/DatabaseManager';\n\nconst db = new DatabaseManager();\nconst userManager = new UserManager(db);\n\nconst UsersRoutes = {\n  login(req, res) {\n    userManager.login(req.body.username, req.body.password, (result) => {\n      if (!result[0].userid) {\n        return res.status(401).json({\n          success: false,\n          message: 'username or password incorrect',\n        });\n      }\n      const token = jwt.sign(\n        {\n          userId: result[0].userid,\n          username: result[0].username,\n        }, process.env.PRIVATE_KEY,\n      );\n      return res.header('x-auth-token', token).status(200).json({\n        success: true,\n        message: 'Successfully logged in',\n        token,\n      });\n    });\n  },\n\n  signup(req, res) {\n    const {\n      fullname, gender, username, password, email,\n    } = req.body;\n    userManager.registerUser(fullname, gender, username, password, email, (result) => {\n      if (result === 'existing') {\n        res.status(401).json({\n          success: false,\n          message: 'username already exists',\n        });\n      } else {\n        const token = jwt.sign({\n          username: result.username,\n          email: result.email,\n        }, process.env.PRIVATE_KEY);\n        res.header('x-auth-token', token).status(200).json({\n          success: true,\n          message: 'user succesfully registered',\n        });\n      }\n    });\n  },\n};\n\nexport default UsersRoutes;\n"]}