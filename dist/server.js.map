{"version":3,"sources":["../server.js"],"names":["app","use","bodyParser","urlencoded","extended","json","req","res","next","header","methods","status","express","static","path","resolve","__dirname","get","sendFile","questionRoute","authRouter","voteRoute","error","Error","success","message","set","process","env","PORT","listen","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAJ,IAAIC,GAAJ,CAAQC,qBAAWG,IAAX,EAAR;;AAEAL,IAAIC,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,GAA3C;AACA,MAAIH,IAAII,OAAJ,KAAgB,SAApB,EAA+B;AAC7BH,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACA,WAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAArB,CAAP;AACD;AACDG;AACD,CARD;AASAR,IAAIC,GAAJ,CAAQW,kBAAQC,MAAR,CAAeC,eAAKC,OAAL,CAAaC,SAAb,EAAwB,UAAxB,CAAf,CAAR;;AAEAhB,IAAIiB,GAAJ,CAAQ,GAAR,EAAa,UAACX,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIW,QAAJ,CAAaJ,eAAKC,OAAL,CAAaC,SAAb,EAAwB,oBAAxB,CAAb,CAAd;AAAA,CAAb;AACAhB,IAAIC,GAAJ,CAAQ,SAAR,EAAmBkB,uBAAnB;AACAnB,IAAIC,GAAJ,CAAQ,eAAR,EAAyBmB,mBAAzB;AACApB,IAAIC,GAAJ,CAAQ,SAAR,EAAmBoB,oBAAnB;AACArB,IAAIC,GAAJ,CAAQ,sBAAO,6BAAP,CAAR;;AAEAD,IAAIC,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMc,QAAQ,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,QAAMX,MAAN,GAAe,GAAf;AACAH,OAAKc,KAAL;AACD,CAJD;;AAMAtB,IAAIC,GAAJ,CAAQ,UAACqB,KAAD,EAAQhB,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AACjCD,MAAII,MAAJ,CAAWW,MAAMX,MAAN,IAAgB,GAA3B;AACAJ,MAAIF,IAAJ,CAAS;AACPmB,aAAS,KADF;AAEPF,WAAO;AACLG,eAASH,MAAMG;AADV;AAFA,GAAT;AAMD,CARD;;AAUAzB,IAAI0B,GAAJ,CAAQ,MAAR,EAAgBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAApC;;AAEA7B,IAAI8B,MAAJ,CAAW9B,IAAIiB,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChCc,UAAQC,GAAR,+BAAwChC,IAAIiB,GAAJ,CAAQ,MAAR,CAAxC;AACD,CAFD;;kBAIejB,G","file":"server.js","sourcesContent":["import express from 'express';\nimport morgan from 'morgan';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport authRouter from './routes/authRoute';\nimport voteRoute from './routes/votesRoute';\nimport questionRoute from './routes/questionRoute';\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', '*');\n  if (req.methods === 'OPTIONS') {\n    res.header('Access-Control-Allow-Methods', 'PUT, POST, DELETE, GET, OPTIONS');\n    return res.status(200).json({});\n  }\n  next();\n});\napp.use(express.static(path.resolve(__dirname, './../UI/')));\n\napp.get('/', (req, res) => res.sendFile(path.resolve(__dirname, './../UI/index.html')));\napp.use('/api/v1', questionRoute);\napp.use('/api/v1/auth/', authRouter);\napp.use('/api/v1', voteRoute);\napp.use(morgan(':method :url :response-time'));\n\napp.use((req, res, next) => {\n  const error = new Error('Not found');\n  error.status = 404;\n  next(error);\n});\n\napp.use((error, req, res, next) => {\n  res.status(error.status || 500);\n  res.json({\n    success: false,\n    error: {\n      message: error.message,\n    },\n  });\n});\n\napp.set('port', process.env.PORT || 8080);\n\napp.listen(app.get('port'), () => {\n  console.log(`Action happening on port ${app.get('port')}`);\n});\n\nexport default app;\n"]}