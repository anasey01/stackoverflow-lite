{"version":3,"sources":["../../auth/auth.js"],"names":["authRouter","express","Router","use","bodyParser","urlencoded","extended","json","get","req","res","post","next","validUser","body","dbManager","selectUserByEmail","email","result","data","fullname","username","gender","password","insertUser","err","console","log","Error","user","valideEmail","trim","validPassword","length"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,aAAcC,kBAAQC,MAAR,EAApB;;AAGA;AACAF,WAAWG,GAAX,CAAeC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAf;;AAEA;AACAN,WAAWG,GAAX,CAAeC,qBAAWG,IAAX,EAAf;;AAEA;AACAP,WAAWQ,GAAX,CAAe,GAAf,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAa;AAC7BA,QAAIH,IAAJ,CAAS;AACL,mBAAW;AADN,KAAT;AAGH,CAJD;;AAMAP,WAAWW,IAAX,CAAgB,SAAhB,EAA2B,UAACF,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AAC3C;AACA,QAAGC,UAAUJ,IAAIK,IAAd,CAAH,EAAuB;AACnBC,4BACCC,iBADD,CACmBP,IAAIK,IAAJ,CAASG,KAD5B,EACmC,UAACC,MAAD,EAAY;AAC3C,gBAAG,CAACA,MAAJ,EAAW;AACP;AACA,oBAAIC,OAAO;AACPC,8BAAWX,IAAIK,IAAJ,CAASM,QADb;AAEPC,8BAAWZ,IAAIK,IAAJ,CAASO,QAFb;AAGPC,4BAAWb,IAAIK,IAAJ,CAASQ,MAHb;AAIPC,8BAAWd,IAAIK,IAAJ,CAASS,QAJb;AAKPN,2BAAWR,IAAIK,IAAJ,CAASG;AALb,iBAAX;AAOAF,oCAAUS,UAAV,CAAqBf,IAAIK,IAAJ,CAASM,QAA9B,EAAwCX,IAAIK,IAAJ,CAASO,QAAjD,EAA2DZ,IAAIK,IAAJ,CAASQ,MAApE,EAA4Eb,IAAIK,IAAJ,CAASS,QAArF,EAA+Fd,IAAIK,IAAJ,CAASG,KAAxG,EAA+G,UAACQ,GAAD,EAAMP,MAAN,EAAgB;AAC3HQ,4BAAQC,GAAR,CAAY,OAAZ,EAAqBF,GAArB,EAA0B,QAA1B,EAAoCP,MAApC;AACAR,wBAAIH,IAAJ,CAASW,MAAT;AACH,iBAHD;AAIH,aAbD,MAaK;AACDR,oBAAIH,IAAJ,CAAS,iCAAT;AACH;AACJ,SAlBD;AAmBH,KApBD,MAoBK;AACDK,aAAK,IAAIgB,KAAJ,CAAU,cAAV,CAAL;AACH;AACJ,CAzBD;;AA2BA,IAAMf,YAAY,SAAZA,SAAY,CAACgB,IAAD,EAAS;AACvB,QAAMC,cAAc,OAAOD,KAAKZ,KAAZ,IAAqB,QAArB,IAAiCY,KAAKZ,KAAL,CAAWc,IAAX,MAAqB,EAA1E;AACA,QAAMC,gBAAgB,OAAOH,KAAKN,QAAZ,IAAwB,QAAxB,IAAoCM,KAAKN,QAAL,CAAcQ,IAAd,MAAwB,EAA5D,IAAkEF,KAAKN,QAAL,CAAcQ,IAAd,GAAqBE,MAArB,IAA8B,CAAtH;AACA,WAAOH,eAAeE,aAAtB;AACH,CAJD;;kBAMehC,U","file":"auth.js","sourcesContent":["import dbManager from \"../model/dbManager\"\r\nimport express from \"express\";\r\nimport bodyParser from \"body-parser\";\r\nconst authRouter  = express.Router();\r\n\r\n\r\n// parse application/x-www-form-urlencoded\r\nauthRouter.use(bodyParser.urlencoded({ extended: false }));\r\n\r\n// parse application/json\r\nauthRouter.use(bodyParser.json());\r\n\r\n//PATHS are pre pended with /auth/\r\nauthRouter.get(\"/\", (req, res)=> {\r\n    res.json({\r\n        \"message\": \"successful\"\r\n    });\r\n});\r\n\r\nauthRouter.post(\"/signup\", (req, res, next) => {\r\n    //Check if email is valid && Check if password is valid\r\n    if(validUser(req.body)){\r\n        dbManager\r\n        .selectUserByEmail(req.body.email, (result) => {\r\n            if(!result){\r\n                //Hash Password Here Before Inserting into Database.\r\n                let data = {\r\n                    fullname : req.body.fullname,\r\n                    username : req.body.username,\r\n                    gender   : req.body.gender,\r\n                    password : req.body.password,\r\n                    email    : req.body.email\r\n                }\r\n                dbManager.insertUser(req.body.fullname, req.body.username, req.body.gender, req.body.password, req.body.email, (err, result) =>{\r\n                    console.log(\"Error\", err, \"Result\", result);\r\n                    res.json(result);\r\n                });\r\n            }else{\r\n                res.json(\"Username or Password incorrect!\");\r\n            }\r\n        })\r\n    }else{\r\n        next(new Error(\"Invalid User\"));\r\n    }\r\n});\r\n\r\nconst validUser = (user) =>{\r\n    const valideEmail = typeof user.email == 'string' && user.email.trim() != '';\r\n    const validPassword = typeof user.password == 'string' && user.password.trim() != '' && user.password.trim().length >=6;\r\n    return valideEmail && validPassword;\r\n}\r\n\r\nexport default authRouter;"]}